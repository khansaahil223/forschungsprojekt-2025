---
apiVersion: v1
kind: Namespace
metadata:
    name: c9s-vlan
    labels:
        pod-security.kubernetes.io/enforce: privileged
---
apiVersion: v1
kind: ConfigMap
metadata:
    name: vlan-srl2-startup-config
    namespace: c9s-vlan
data:
  startup-config: |-
    # no vlan tagging configured
    / interface ethernet-1/1 {
        admin-state enable
        subinterface 0 {
            type bridged
            admin-state enable
        }
    }

    / interface ethernet-1/10 {
        admin-state enable
        subinterface 0 {
            type bridged
            admin-state enable
        }
    }

    # bridge domain is like a L2 switch instance
    / network-instance bridge-1 {
        type mac-vrf
        admin-state enable
        interface ethernet-1/1.0 {
        }
        interface ethernet-1/10.0 {
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
    name: vlan-srl1-startup-config
    namespace: c9s-vlan
data:
  startup-config: |-
    # no vlan tagging configured
    / interface ethernet-1/1 {
        admin-state enable
        subinterface 0 {
            type bridged
            admin-state enable
        }
    }

    / interface ethernet-1/10 {
        admin-state enable
        subinterface 0 {
            type bridged
            admin-state enable
        }
    }

    # bridge domain is like a L2 switch instance
    / network-instance bridge-1 {
        type mac-vrf
        admin-state enable
        interface ethernet-1/1.0 {
        }
        interface ethernet-1/10.0 {
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vlan-client2-files
  namespace: c9s-vlan
data:
  configs-client.sh: |-
    #!/bin/bash

    # client id
    ID=$1

    ###### eth1 ######
    # no tagging
    ip addr add 10.1.0.${ID}/30 dev eth1
    ip link set dev eth1 address aa:c1:ab:00:00:0${ID}

    # single tag VID 10
    ip link add name eth1.10 link eth1 type vlan id 10
    ip addr add 10.1.1.${ID}/30 dev eth1.10
    ip link set dev eth1.10 address aa:c1:ab:00:01:0${ID}
    ip link set dev eth1.10 up

    # single tag VID 11
    ip link add name eth1.11 link eth1 type vlan id 11
    ip addr add 10.1.2.${ID}/30 dev eth1.11
    ip link set dev eth1.11 address aa:c1:ab:00:02:0${ID}
    ip link set dev eth1.11 up

    # qinq outer tag 12, inner tag 13
    ip link add name eth1.12 link eth1 type vlan proto 802.1q id 12 # outer
    ip link add name eth1.12.13 link eth1.12 type vlan proto 802.1q id 13 # inner tag
    ip addr add 10.1.3.${ID}/30 dev eth1.12.13
    ip link set dev eth1.12 address aa:c1:ab:03:00:0${ID}
    ip link set dev eth1.12 up
    ip link set dev eth1.12.13 address aa:c1:ab:03:03:0${ID}
    ip link set dev eth1.12.13 up

    # explicit null tag case is not covered
    # since it is a quirky case that varies from vendor to vendor
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vlan-client3-files
  namespace: c9s-vlan
data:
  configs-client.sh: |-
    #!/bin/bash

    # client id
    ID=$1

    ###### eth1 ######
    # no tagging
    ip addr add 10.1.0.${ID}/30 dev eth1
    ip link set dev eth1 address aa:c1:ab:00:00:0${ID}

    # single tag VID 10
    ip link add name eth1.10 link eth1 type vlan id 10
    ip addr add 10.1.1.${ID}/30 dev eth1.10
    ip link set dev eth1.10 address aa:c1:ab:00:01:0${ID}
    ip link set dev eth1.10 up

    # single tag VID 11
    ip link add name eth1.11 link eth1 type vlan id 11
    ip addr add 10.1.2.${ID}/30 dev eth1.11
    ip link set dev eth1.11 address aa:c1:ab:00:02:0${ID}
    ip link set dev eth1.11 up

    # qinq outer tag 12, inner tag 13
    ip link add name eth1.12 link eth1 type vlan proto 802.1q id 12 # outer
    ip link add name eth1.12.13 link eth1.12 type vlan proto 802.1q id 13 # inner tag
    ip addr add 10.1.3.${ID}/30 dev eth1.12.13
    ip link set dev eth1.12 address aa:c1:ab:03:00:0${ID}
    ip link set dev eth1.12 up
    ip link set dev eth1.12.13 address aa:c1:ab:03:03:0${ID}
    ip link set dev eth1.12.13 up

    # explicit null tag case is not covered
    # since it is a quirky case that varies from vendor to vendor
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vlan-client4-files
  namespace: c9s-vlan
data:
  configs-client.sh: |-
    #!/bin/bash

    # client id
    ID=$1

    ###### eth1 ######
    # no tagging
    ip addr add 10.1.0.${ID}/30 dev eth1
    ip link set dev eth1 address aa:c1:ab:00:00:0${ID}

    # single tag VID 10
    ip link add name eth1.10 link eth1 type vlan id 10
    ip addr add 10.1.1.${ID}/30 dev eth1.10
    ip link set dev eth1.10 address aa:c1:ab:00:01:0${ID}
    ip link set dev eth1.10 up

    # single tag VID 11
    ip link add name eth1.11 link eth1 type vlan id 11
    ip addr add 10.1.2.${ID}/30 dev eth1.11
    ip link set dev eth1.11 address aa:c1:ab:00:02:0${ID}
    ip link set dev eth1.11 up

    # qinq outer tag 12, inner tag 13
    ip link add name eth1.12 link eth1 type vlan proto 802.1q id 12 # outer
    ip link add name eth1.12.13 link eth1.12 type vlan proto 802.1q id 13 # inner tag
    ip addr add 10.1.3.${ID}/30 dev eth1.12.13
    ip link set dev eth1.12 address aa:c1:ab:03:00:0${ID}
    ip link set dev eth1.12 up
    ip link set dev eth1.12.13 address aa:c1:ab:03:03:0${ID}
    ip link set dev eth1.12.13 up

    # explicit null tag case is not covered
    # since it is a quirky case that varies from vendor to vendor
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vlan-client1-files
  namespace: c9s-vlan
data:
  configs-client.sh: |-
    #!/bin/bash

    # client id
    ID=$1

    ###### eth1 ######
    # no tagging
    ip addr add 10.1.0.${ID}/30 dev eth1
    ip link set dev eth1 address aa:c1:ab:00:00:0${ID}

    # single tag VID 10
    ip link add name eth1.10 link eth1 type vlan id 10
    ip addr add 10.1.1.${ID}/30 dev eth1.10
    ip link set dev eth1.10 address aa:c1:ab:00:01:0${ID}
    ip link set dev eth1.10 up

    # single tag VID 11
    ip link add name eth1.11 link eth1 type vlan id 11
    ip addr add 10.1.2.${ID}/30 dev eth1.11
    ip link set dev eth1.11 address aa:c1:ab:00:02:0${ID}
    ip link set dev eth1.11 up

    # qinq outer tag 12, inner tag 13
    ip link add name eth1.12 link eth1 type vlan proto 802.1q id 12 # outer
    ip link add name eth1.12.13 link eth1.12 type vlan proto 802.1q id 13 # inner tag
    ip addr add 10.1.3.${ID}/30 dev eth1.12.13
    ip link set dev eth1.12 address aa:c1:ab:03:00:0${ID}
    ip link set dev eth1.12 up
    ip link set dev eth1.12.13 address aa:c1:ab:03:03:0${ID}
    ip link set dev eth1.12.13 up

    # explicit null tag case is not covered
    # since it is a quirky case that varies from vendor to vendor
---
apiVersion: clabernetes.containerlab.dev/v1alpha1
kind: Topology
metadata:
  name: vlan
  namespace: c9s-vlan
spec:
  deployment:
    filesFromConfigMap:
        client1:
          - filePath: configs/client.sh
            configMapName: vlan-client1-files
            configMapPath: configs-client.sh
            mode: execute
        client2:
          - filePath: configs/client.sh
            configMapName: vlan-client2-files
            configMapPath: configs-client.sh
            mode: execute
        client3:
          - filePath: configs/client.sh
            configMapName: vlan-client3-files
            configMapPath: configs-client.sh
            mode: execute
        client4:
          - filePath: configs/client.sh
            configMapName: vlan-client4-files
            configMapPath: configs-client.sh
            mode: execute
        srl1:
          - filePath: configs/srl.cfg
            configMapName: vlan-srl1-startup-config
            configMapPath: startup-config
            mode: read
        srl2:
          - filePath: configs/srl.cfg
            configMapName: vlan-srl2-startup-config
            configMapPath: startup-config
            mode: read
  naming: non-prefixed
  definition:
    containerlab: |-
          name: vlan

          topology:
            kinds:
              nokia_srlinux:
                image: ghcr.io/nokia/srlinux:24.10.1

                nodeSelector:
                  node-type: routers

              linux:
                image: ghcr.io/srl-labs/alpine

                nodeSelector:
                  node-type: clients

            nodes:
              srl1:
                kind: nokia_srlinux
                startup-config: configs/srl.cfg

              srl2:
                kind: nokia_srlinux
                startup-config: configs/srl.cfg

              client1:
                kind: linux
                binds:
                  - configs/client.sh:/config.sh
                exec:
                  - "ash -c '/config.sh 1'"

              client2:
                kind: linux
                binds:
                  - configs/client.sh:/config.sh
                exec:
                  - "ash -c '/config.sh 2'"

              client3:
                kind: linux
                binds:
                  - configs/client.sh:/config.sh
                exec:
                  - "ash -c '/config.sh 3'"

              client4:
                kind: linux
                binds:
                  - configs/client.sh:/config.sh
                exec:
                  - "ash -c '/config.sh 4'"

            links:
              # links between client1 and srl1
              - endpoints: [client1:eth1, srl1:e1-1]

              # inter-switch link
              - endpoints: [srl1:e1-10, srl2:e1-10]

              # links between client2 and srl2
              - endpoints: [srl2:e1-1, client2:eth1]

              # links between client3 and srl1
              - endpoints: [client3:eth1, srl1:e1-1]
              # links between client4 and srl2
              - endpoints: [srl2:e1-1, client4:eth1]
